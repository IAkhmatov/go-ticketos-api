// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"errors"
	"github.com/gofiber/fiber/v2"
	"github.com/rs/zerolog"
	"go-ticketos/internal/config"
	"go-ticketos/internal/service"
	"go-ticketos/internal/storage"
	"go-ticketos/internal/transport"
	"go-ticketos/pkg/log"
	"go-ticketos/pkg/paymasterclient"
)

// Injectors from wire.go:

func InitAPI() (*API, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	db, err := storage.NewSqlxDBFromConfig(configConfig)
	if err != nil {
		return nil, err
	}
	eventPSQLRepo, err := storage.NewEventRepo(db)
	if err != nil {
		return nil, err
	}
	eventService, err := service.NewEventService(eventPSQLRepo)
	if err != nil {
		return nil, err
	}
	logger := log.NewLogger(configConfig)
	eventControllerFiber, err := transport.NewEventController(eventService, logger)
	if err != nil {
		return nil, err
	}
	orderPSQLRepo, err := storage.NewOrderRepo(db)
	if err != nil {
		return nil, err
	}
	ticketCategoryPSQLRepo, err := storage.NewTicketCategoryRepo(db)
	if err != nil {
		return nil, err
	}
	promocodePSQLRepo, err := storage.NewPromocodeRepo(db, ticketCategoryPSQLRepo)
	if err != nil {
		return nil, err
	}
	payMasterClient, err := paymasterclient.NewPayMasterClient(configConfig, logger)
	if err != nil {
		return nil, err
	}
	orderService, err := service.NewOrderService(orderPSQLRepo, ticketCategoryPSQLRepo, promocodePSQLRepo, payMasterClient, configConfig, logger)
	if err != nil {
		return nil, err
	}
	orderControllerFiber, err := transport.NewOrderController(orderService, logger)
	if err != nil {
		return nil, err
	}
	payMasterWebHookUseCase, err := service.NewPayMasterWebHookUseCase(orderService, logger)
	if err != nil {
		return nil, err
	}
	payMasterControllerFiber, err := transport.NewPayMasterController(payMasterWebHookUseCase, logger)
	if err != nil {
		return nil, err
	}
	api, err := NewAPI(eventControllerFiber, orderControllerFiber, payMasterControllerFiber, logger, configConfig)
	if err != nil {
		return nil, err
	}
	return api, nil
}

// wire.go:

type API struct {
	eventController     transport.EventController[fiber.Ctx]
	orderController     transport.OrderController[fiber.Ctx]
	paymasterController transport.PayMasterController[fiber.Ctx]
	logger              *zerolog.Logger
	cfg                 *config.Config
}

func NewAPI(
	eventController transport.EventController[fiber.Ctx],
	orderController transport.OrderController[fiber.Ctx],
	paymasterController transport.PayMasterController[fiber.Ctx],
	logger *zerolog.Logger,
	cfg *config.Config,
) (*API, error) {
	if eventController == nil {
		return nil, errors.New("NewAPI: eventController is nil")
	}
	if orderController == nil {
		return nil, errors.New("NewAPI: orderController is nil")
	}
	if paymasterController == nil {
		return nil, errors.New("NewAPI: paymasterController is nil")
	}
	if logger == nil {
		return nil, errors.New("NewAPI: logger is nil")
	}
	return &API{
		eventController:     eventController,
		orderController:     orderController,
		paymasterController: paymasterController,
		logger:              logger,
		cfg:                 cfg,
	}, nil
}
