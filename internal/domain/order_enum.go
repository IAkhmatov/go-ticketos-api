// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.10
// Revision: f2bc4fe0810071d365417dd2e3ce1b4d64b82c47
// Build Date: 2023-11-13T16:50:24Z
// Built By: goreleaser

package domain

import (
	"errors"
	"fmt"
)

const (
	// OrderStatusPrepared is a OrderStatus of type prepared.
	OrderStatusPrepared OrderStatus = "prepared"
	// OrderStatusAwaitingPayment is a OrderStatus of type awaiting_payment.
	OrderStatusAwaitingPayment OrderStatus = "awaiting_payment"
	// OrderStatusCompleted is a OrderStatus of type completed.
	OrderStatusCompleted OrderStatus = "completed"
)

var ErrInvalidOrderStatus = errors.New("not a valid OrderStatus")

// String implements the Stringer interface.
func (x OrderStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OrderStatus) IsValid() bool {
	_, err := ParseOrderStatus(string(x))
	return err == nil
}

var _OrderStatusValue = map[string]OrderStatus{
	"prepared":         OrderStatusPrepared,
	"awaiting_payment": OrderStatusAwaitingPayment,
	"completed":        OrderStatusCompleted,
}

// ParseOrderStatus attempts to convert a string to a OrderStatus.
func ParseOrderStatus(name string) (OrderStatus, error) {
	if x, ok := _OrderStatusValue[name]; ok {
		return x, nil
	}
	return OrderStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidOrderStatus)
}

// MustParseOrderStatus converts a string to a OrderStatus, and panics if is not valid.
func MustParseOrderStatus(name string) OrderStatus {
	val, err := ParseOrderStatus(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x OrderStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OrderStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseOrderStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
