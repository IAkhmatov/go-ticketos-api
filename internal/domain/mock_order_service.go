// Code generated by mockery v2.37.1. DO NOT EDIT.

package domain

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

// Create provides a mock function with given fields: props
func (_m *MockOrderService) Create(props CreateOrderProps) (*Order, error) {
	ret := _m.Called(props)

	var r0 *Order
	var r1 error
	if rf, ok := ret.Get(0).(func(CreateOrderProps) (*Order, error)); ok {
		return rf(props)
	}
	if rf, ok := ret.Get(0).(func(CreateOrderProps) *Order); ok {
		r0 = rf(props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Order)
		}
	}

	if rf, ok := ret.Get(1).(func(CreateOrderProps) error); ok {
		r1 = rf(props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MockOrderService) GetByID(id uuid.UUID) (*Order, error) {
	ret := _m.Called(id)

	var r0 *Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: props
func (_m *MockOrderService) Update(props UpdateOrderProps) (*Order, error) {
	ret := _m.Called(props)

	var r0 *Order
	var r1 error
	if rf, ok := ret.Get(0).(func(UpdateOrderProps) (*Order, error)); ok {
		return rf(props)
	}
	if rf, ok := ret.Get(0).(func(UpdateOrderProps) *Order); ok {
		r0 = rf(props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Order)
		}
	}

	if rf, ok := ret.Get(1).(func(UpdateOrderProps) error); ok {
		r1 = rf(props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
