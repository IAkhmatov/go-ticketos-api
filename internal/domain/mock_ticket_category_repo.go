// Code generated by mockery v2.37.1. DO NOT EDIT.

package domain

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockTicketCategoryRepo is an autogenerated mock type for the TicketCategoryRepo type
type MockTicketCategoryRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: tc
func (_m *MockTicketCategoryRepo) Create(tc TicketCategory) error {
	ret := _m.Called(tc)

	var r0 error
	if rf, ok := ret.Get(0).(func(TicketCategory) error); ok {
		r0 = rf(tc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *MockTicketCategoryRepo) GetByID(id uuid.UUID) (*TicketCategory, error) {
	ret := _m.Called(id)

	var r0 *TicketCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*TicketCategory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *TicketCategory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TicketCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTicketCategoryRepo creates a new instance of MockTicketCategoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTicketCategoryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTicketCategoryRepo {
	mock := &MockTicketCategoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
