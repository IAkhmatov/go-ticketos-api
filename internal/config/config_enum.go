// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.10
// Revision: f2bc4fe0810071d365417dd2e3ce1b4d64b82c47
// Build Date: 2023-11-13T16:50:24Z
// Built By: goreleaser

package config

import (
	"errors"
	"fmt"
)

const (
	// AppEnvLocal is a AppEnv of type local.
	AppEnvLocal AppEnv = "local"
	// AppEnvTests is a AppEnv of type tests.
	AppEnvTests AppEnv = "tests"
	// AppEnvProduction is a AppEnv of type production.
	AppEnvProduction AppEnv = "production"
)

var ErrInvalidAppEnv = errors.New("not a valid AppEnv")

// String implements the Stringer interface.
func (x AppEnv) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AppEnv) IsValid() bool {
	_, err := ParseAppEnv(string(x))
	return err == nil
}

var _AppEnvValue = map[string]AppEnv{
	"local":      AppEnvLocal,
	"tests":      AppEnvTests,
	"production": AppEnvProduction,
}

// ParseAppEnv attempts to convert a string to a AppEnv.
func ParseAppEnv(name string) (AppEnv, error) {
	if x, ok := _AppEnvValue[name]; ok {
		return x, nil
	}
	return AppEnv(""), fmt.Errorf("%s is %w", name, ErrInvalidAppEnv)
}

// MustParseAppEnv converts a string to a AppEnv, and panics if is not valid.
func MustParseAppEnv(name string) AppEnv {
	val, err := ParseAppEnv(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x AppEnv) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AppEnv) UnmarshalText(text []byte) error {
	tmp, err := ParseAppEnv(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
