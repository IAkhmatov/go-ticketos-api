// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.10
// Revision: f2bc4fe0810071d365417dd2e3ce1b4d64b82c47
// Build Date: 2023-11-13T16:50:24Z
// Built By: goreleaser

package paymasterclient

import (
	"errors"
	"fmt"
)

const (
	// CurrencyRUB is a Currency of type RUB.
	CurrencyRUB Currency = "RUB"
)

var ErrInvalidCurrency = errors.New("not a valid Currency")

// String implements the Stringer interface.
func (x Currency) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Currency) IsValid() bool {
	_, err := ParseCurrency(string(x))
	return err == nil
}

var _CurrencyValue = map[string]Currency{
	"RUB": CurrencyRUB,
}

// ParseCurrency attempts to convert a string to a Currency.
func ParseCurrency(name string) (Currency, error) {
	if x, ok := _CurrencyValue[name]; ok {
		return x, nil
	}
	return Currency(""), fmt.Errorf("%s is %w", name, ErrInvalidCurrency)
}

// MustParseCurrency converts a string to a Currency, and panics if is not valid.
func MustParseCurrency(name string) Currency {
	val, err := ParseCurrency(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x Currency) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Currency) UnmarshalText(text []byte) error {
	tmp, err := ParseCurrency(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// PaymentMethodBankCard is a PaymentMethod of type BankCard.
	PaymentMethodBankCard PaymentMethod = "BankCard"
)

var ErrInvalidPaymentMethod = errors.New("not a valid PaymentMethod")

// String implements the Stringer interface.
func (x PaymentMethod) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PaymentMethod) IsValid() bool {
	_, err := ParsePaymentMethod(string(x))
	return err == nil
}

var _PaymentMethodValue = map[string]PaymentMethod{
	"BankCard": PaymentMethodBankCard,
}

// ParsePaymentMethod attempts to convert a string to a PaymentMethod.
func ParsePaymentMethod(name string) (PaymentMethod, error) {
	if x, ok := _PaymentMethodValue[name]; ok {
		return x, nil
	}
	return PaymentMethod(""), fmt.Errorf("%s is %w", name, ErrInvalidPaymentMethod)
}

// MustParsePaymentMethod converts a string to a PaymentMethod, and panics if is not valid.
func MustParsePaymentMethod(name string) PaymentMethod {
	val, err := ParsePaymentMethod(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x PaymentMethod) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PaymentMethod) UnmarshalText(text []byte) error {
	tmp, err := ParsePaymentMethod(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
